// apps/vibesynq/src/sw.ts
// Placeholder Service Worker for PWA

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { createHandlerBoundToURL, precacheAndRoute } from "workbox-precaching";
import { NavigationRoute, registerRoute } from "workbox-routing";
import { CacheFirst, StaleWhileRevalidate } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

self.skipWaiting();
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST || []);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell.
const fileExtensionRegexp = /\/[^\/?]+\.[^\/]+$/;
const navigationRoute = new NavigationRoute(
	createHandlerBoundToURL("/index.html"), // Assumes index.html is at the root of the public path
	{
		denylist: [fileExtensionRegexp] // Don't serve index.html for files
	}
);
registerRoute(navigationRoute);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from public/
registerRoute(
	({ url }) => url.origin === self.location.origin && url.pathname.endsWith(".png"),
	new StaleWhileRevalidate({
		cacheName: "images",
		plugins: [new ExpirationPlugin({ maxEntries: 50 })]
	})
);

// Cache other static assets (e.g., fonts, svgs) with CacheFirst strategy
registerRoute(
	({ url }) =>
		url.origin === self.location.origin &&
		(url.pathname.endsWith(".woff2") || url.pathname.endsWith(".svg")),
	new CacheFirst({
		cacheName: "static-assets",
		plugins: [
			new ExpirationPlugin({ maxEntries: 30, maxAgeSeconds: 30 * 24 * 60 * 60 }) // 30 Days
		]
	})
);

// Example: Caching API calls (customize as needed)
/*
registerRoute(
	({url}) => url.origin === 'https://api.example.com' && url.pathname.startsWith('/data'),
	new NetworkFirst({
		cacheName: 'api-cache',
		plugins: [
			new ExpirationPlugin({ maxEntries: 50, maxAgeSeconds: 5 * 60 }) // 5 minutes
		]
	})
);
*/

self.addEventListener("message", event => {
	if (event.data && event.data.type === "SKIP_WAITING") {
		self.skipWaiting();
	}
});
